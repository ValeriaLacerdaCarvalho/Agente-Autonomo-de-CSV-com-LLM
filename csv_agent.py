import os
import zipfile
import pandas as pd
import streamlit as st
from pathlib import Path
from langchain.llms import Ollama
import tempfile
import shutil
import traceback
import locale
import re
import ast
import textwrap


def main():
    st.set_page_config(
        page_title="Agente de An√°lise CSV",
        page_icon="üìä",
        layout="wide"
    )
    

class CSVAnalysisAgent:
    def __init__(self):
        """Inicializa o agente com LLM local gratuita (Ollama)"""
        try:
            # Usando Ollama com modelo gratuito
            self.llm = Ollama(model="llama3.2:3b", temperature=0)
            self.dataframes = {}
            self.current_df = None
        except Exception as e:
            st.error(f"Erro ao inicializar LLM: {e}")
            st.info("Certifique-se de ter o Ollama instalado e rodando")
    
    def extract_zip_files(self, zip_path, extract_to):
        """Descompacta arquivos zip"""
        try:
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_to)
            return True
        except Exception as e:
            st.error(f"Erro ao descompactar: {e}")
            return False
    
    def load_csv_files(self, directory):
        """Carrega todos os arquivos CSV de um diret√≥rio"""
        csv_files = {}
        
        for file_path in Path(directory).rglob("*.csv"):
            try:
                df = pd.read_csv(file_path, encoding='utf-8')
                # Limpa nomes das colunas
                df.columns = df.columns.str.strip()
                csv_files[file_path.name] = df
                st.success(f"Carregado: {file_path.name} ({len(df)} linhas)")
            except UnicodeDecodeError:
                try:
                    df = pd.read_csv(file_path, encoding='latin-1')
                    df.columns = df.columns.str.strip()
                    csv_files[file_path.name] = df
                    st.success(f"Carregado: {file_path.name} ({len(df)} linhas)")
                except Exception as e:
                    st.error(f"Erro ao carregar {file_path.name}: {e}")
            except Exception as e:
                st.error(f"Erro ao carregar {file_path.name}: {e}")
        
        return csv_files
    
    def select_dataframe(self, df_name):
        """Seleciona um DataFrame espec√≠fico para an√°lise"""
        if df_name in self.dataframes:
            self.current_df = self.dataframes[df_name]
            return True
        return False

    # SUBSTITUA TODA A SUA FUN√á√ÉO step0_select_file PELA VERS√ÉO ABAIXO

    def step0_select_file(self, question):
        """ETAPA 0: Seleciona o(s) arquivo(s) usando L√ìGICA DE C√ìDIGO, sem LLM, e retorna os pap√©is identificados."""
        
        file_list = list(self.dataframes.keys())
        question_lower = question.lower()

        # Se tiver s√≥ 1 arquivo, a escolha √© √≥bvia.
        if len(file_list) == 1:
            # Retorna a informa√ß√£o completa, mesmo para um arquivo
            return {'sucesso': True, 'arquivos_escolhidos': file_list, 'header_file': None, 'items_file': file_list[0]}
        
        # Se tiver 2 arquivos, a heur√≠stica √© aplicada.
        elif len(file_list) == 2:
            df1_name, df2_name = file_list[0], file_list[1]
            df1, df2 = self.dataframes[df1_name], self.dataframes[df2_name]
            
            # Heur√≠stica para identificar pap√©is
            if len(df1) > len(df2):
                items_file_name, header_file_name = df1_name, df2_name
            else:
                items_file_name, header_file_name = df2_name, df1_name
            
            # L√≥gica de roteamento baseada em palavras-chave
            header_keywords = ['fornecedor', 'fornecedores', 'nota fiscal', 'notas', 'montante recebido']
            items_keywords = ['item', 'itens', 'produto', 'produtos', 'quantidade', 'valor unit√°rio', 'valor total']

            needs_header = any(keyword in question_lower for keyword in header_keywords)
            needs_items = any(keyword in question_lower for keyword in items_keywords)

            if needs_header and needs_items:
                chosen_files = [items_file_name, header_file_name]
            elif needs_header:
                chosen_files = [header_file_name]
            elif needs_items:
                chosen_files = [items_file_name]
            else:
                # Caso padr√£o
                chosen_files = [items_file_name]
                
            # Retorna o dicion√°rio completo com os pap√©is identificados
            return {
                'sucesso': True,
                'arquivos_escolhidos': chosen_files,
                'header_file': header_file_name,
                'items_file': items_file_name
            }

        else:
            # Se tiver mais de 2 arquivos ou nenhum, a l√≥gica atual n√£o suporta.
            return {'sucesso': False, 'erro': 'Esta l√≥gica de roteamento funciona apenas com 1 ou 2 arquivos carregados.'}

    def step1_interpret_question(self, question, selected_files, header_file, items_file):
        """ETAPA 1: LLM interpreta a pergunta e gera c√≥digo Python usando um prompt mestre com exemplos."""
        
        # Esta fun√ß√£o agora retorna apenas a string de c√≥digo.
        # A l√≥gica de retornar um dicion√°rio foi removida.
        
        # L√≥gica para lidar com um √∫nico arquivo
        if len(selected_files) == 1:
            df_name = selected_files[0]
            self.select_dataframe(df_name)

            dataset_info = f"""
INFORMA√á√ïES DO DATASET:
- Nome do DataFrame: df
- Colunas dispon√≠veis: {list(self.current_df.columns)}
"""
            prompt = f"""
Voc√™ √© um especialista em Python/Pandas que gera pequenos trechos de c√≥digo para responder a uma pergunta.

{dataset_info}

REGRAS CR√çTICAS E OBRIGAT√ìRIAS:
1.  O DataFrame `df` j√° existe. Opere diretamente nele.
2.  O resultado final DEVE ser armazenado em uma vari√°vel string chamada `resultado`.
3.  Gere APENAS o c√≥digo Python. N√ÉO inclua `import`, `print`, coment√°rios ou qualquer texto de explica√ß√£o.

---
EXEMPLOS DE GABARITO (Use como guia para responder √† pergunta do usu√°rio):

# GABARITO 1: Pergunta sobre CONTAGEM
PERGUNTA: "Quantos itens existem?" ou "Quantas linhas tem o dataset?"
C√ìDIGO GERADO:
contagem = len(df)
resultado = f"A contagem de linhas √© {{contagem}}."

# GABARITO 2: Pergunta sobre VALOR M√ÅXIMO
PERGUNTA: "Qual o produto mais caro?"
C√ìDIGO GERADO:
linha_maior_valor = df.loc[df['VALOR UNIT√ÅRIO'].idxmax()]
produto = linha_maior_valor['DESCRI√á√ÉO DO PRODUTO/SERVI√áO']
valor = linha_maior_valor['VALOR UNIT√ÅRIO']
resultado = f"O produto com maior valor unit√°rio √© '{{produto}}' com valor de R$ {{valor:.2f}}."

# GABARITO 3: Pergunta sobre TOP N
PERGUNTA: "Mostre o top 5 produtos por quantidade"
C√ìDIGO GERADO:
top_5 = df.groupby('DESCRI√á√ÉO DO PRODUTO/SERVI√áO')['QUANTIDADE'].sum().nlargest(5).reset_index()
resultado = f"O top 5 produtos por quantidade s√£o:\\n{{top_5.to_string(index=False)}}"

# GABARITO 4: Pergunta sobre SOMA TOTAL
PERGUNTA: "Qual a soma dos valores?"
C√ìDIGO GERADO:
soma_total = df['VALOR TOTAL'].sum()
resultado = f"A soma total dos valores √© {{soma_total}}."

# Trecho a ser ADICIONADO no prompt da step1_interpret_question

# GABARITO 5: Pergunta sobre CONTAGEM DE NOTAS
PERGUNTA: "Quantas notas fiscais foram emitidas?"
C√ìDIGO GERADO:
contagem_notas = len(df)
resultado = f"Foram emitidas {{contagem_notas}} notas fiscais."

---
PERGUNTA REAL DO USU√ÅRIO: "{question}"

C√ìDIGO PYTHON (Siga o gabarito mais parecido com a pergunta real):
"""

        # L√≥gica para lidar com m√∫ltiplos arquivos
        else:
            df_cabecalho = self.dataframes[header_file]
            df_itens = self.dataframes[items_file]
            dataset_info = f"""
INFORMA√á√ïES DOS DATASETS:
1. DataFrame `df_cabecalho` (do arquivo '{header_file}'):
   - Colunas: {list(df_cabecalho.columns)}
2. DataFrame `df_itens` (do arquivo '{items_file}'):
   - Colunas: {list(df_itens.columns)}
Coluna em comum para jun√ß√£o (merge): 'CHAVE DE ACESSO'
"""
            safety_rules = "REGRAS: Gere APENAS c√≥digo Python. N√ÉO use `print`. Salve a resposta na vari√°vel `resultado`."
            
            prompt = f"""
            {dataset_info}
            {safety_rules}
            PERGUNTA DO USU√ÅRIO: "{question}"

            INSTRU√á√ÉO OBRIGAT√ìRIA: Primeiro, junte os dataframes com `df_merged = pd.merge(df_cabecalho, df_itens, on='CHAVE DE ACESSO')`. Depois, analise o `df_merged`.

            EXEMPLO DE C√ìDIGO:
            df_merged = pd.merge(df_cabecalho, df_itens, on='CHAVE DE ACESSO')
            linha_maior_valor = df_merged.loc[df_merged['VALOR UNIT√ÅRIO'].idxmax()]
            fornecedor = linha_maior_valor['RAZ√ÉO SOCIAL EMITENTE_x']
            produto = linha_maior_valor['DESCRI√á√ÉO DO PRODUTO/SERVI√áO']
            resultado = f"O fornecedor do item mais caro √© '{{fornecedor}}', e o item √© '{{produto}}'."

            C√ìDIGO PYTHON:
            """

        try:
            response = self.llm.invoke(prompt)
            # L√≥gica de limpeza robusta
            cleaned_code = response.strip()
            if cleaned_code.startswith('```python'):
                cleaned_code = cleaned_code[len('```python'):].strip()
            if cleaned_code.startswith('`'):
                cleaned_code = cleaned_code.strip('`').strip()
            if cleaned_code.endswith('```'):
                cleaned_code = cleaned_code[:-len('```')].strip()
            return cleaned_code
        except Exception as e:
            return f"Erro na interpreta√ß√£o: {str(e)}"
    def step2_execute_code(self, generated_code, selected_files):
        """ETAPA 2: Executa o c√≥digo Python gerado pela LLM com valida√ß√£o."""
        
        # Cria um namespace seguro
        namespace = {
            'pd': pd,
            'resultado': None
        }

        # Adiciona os DataFrames necess√°rios ao namespace
        if len(selected_files) == 1:
            namespace['df'] = self.dataframes[selected_files[0]]
        else:
            # Garante que os nomes das vari√°veis correspondam aos usados no prompt da Etapa 1
            namespace['df_cabecalho'] = self.dataframes['202401_NFs_Cabecalho.csv']
            namespace['df_itens'] = self.dataframes['202401_NFs_Itens.csv']

        try:
            exec(generated_code, namespace)
            resultado = namespace.get('resultado', 'C√≥digo executado mas vari√°vel resultado n√£o encontrada')
            
            return {
                'sucesso': True,
                'resultado': resultado,
                'codigo_executado': generated_code
            }
            
        except Exception as e:
            return {
                'sucesso': False,
                'erro': str(e),
                'traceback': traceback.format_exc(),
                'codigo_executado': generated_code
            }    
        

    def step3_generate_response(self, user_question, execution_result):
        """ETAPA 3: Formata n√∫meros seletivamente e gera resposta textual."""

        if execution_result['sucesso']:
            
            formatted_result = str(execution_result['resultado'])
            
            # --- IN√çCIO DA NOVA L√ìGICA DE FORMATA√á√ÉO INTELIGENTE ---
            
            # Por padr√£o, vamos formatar como moeda, a menos que a pergunta indique o contr√°rio.
            should_format_currency = True
            question_lower = user_question.lower()
            
            # Palavras-chave que indicam que o resultado N√ÉO √© moeda.
            non_currency_keywords = ['quantas', 'contagem', 'top', 'quantidade']
            
            if any(keyword in question_lower for keyword in non_currency_keywords):
                should_format_currency = False
                
            # A formata√ß√£o de moeda s√≥ acontece se a condi√ß√£o for verdadeira
            if should_format_currency:
                try:
                    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
                except locale.Error:
                    try:
                        locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252') # Padr√£o para Windows
                    except locale.Error:
                        pass

                # Procura pelo primeiro n√∫mero no texto do resultado para formatar
                numbers_found = re.findall(r'(\d+\.?\d*)', formatted_result)
                if numbers_found:
                    number_to_format_str = numbers_found[0]
                    try:
                        number_to_format_float = float(number_to_format_str)
                        # Formata o n√∫mero como moeda brasileira
                        formatted_currency = locale.currency(number_to_format_float, grouping=True, symbol='R$')
                        # Substitui o n√∫mero original no texto pelo n√∫mero formatado
                        formatted_result = formatted_result.replace(number_to_format_str, formatted_currency, 1)
                    except (ValueError, IndexError):
                        pass # Se n√£o for um n√∫mero v√°lido, n√£o faz nada
            
            # --- FIM DA NOVA L√ìGICA DE FORMATA√á√ÉO INTELIGENTE ---

            prompt = f"""
            Sua tarefa √© criar uma frase clara e amig√°vel em portugu√™s a partir dos dados fornecidos.

            PERGUNTA ORIGINAL DO USU√ÅRIO: {user_question}
            
            DADOS J√Å FORMATADOS: 
            {formatted_result}

            INSTRU√á√ïES:
            - Use os "DADOS J√Å FORMATADOS" para construir sua resposta.
            - Apresente a resposta de forma direta e natural.
            - N√ÉO mencione aspectos t√©cnicos. Apenas a resposta final.

            Exemplo 1 (Contagem):
            DADOS J√Å FORMATADOS: "A contagem de linhas √© 565."
            RESPOSTA FINAL: "Existem 565 linhas de itens no total."

            Exemplo 2 (Moeda):
            DADOS J√Å FORMATADOS: "A soma total dos valores √© R$ 3.371.754,84."
            RESPOSTA FINAL: "A soma total dos valores √© de R$ 3.371.754,84."

            RESPOSTA FINAL EM PORTUGU√äS:
            """
        else:
            # A l√≥gica de erro continua a mesma
            prompt = f"""       
                Houve um erro ao processar a pergunta: {user_question}
                ERRO: {execution_result['erro']}
                Explique de forma simples que houve um problema...
                RESPOSTA:
                """
        
        try:
            response = self.llm.invoke(prompt)
            return response
        except Exception as e:
            return f"Erro ao gerar resposta: {str(e)}"

    def query_data(self, question):
        """M√©todo principal que executa o fluxo aut√¥nomo completo."""
        
        if not self.dataframes:
            return "Por favor, carregue primeiro os arquivos CSV."
        
        with st.expander("üîç Debug - Processo Aut√¥nomo Completo"):
            
            st.write("**ETAPA 0: Agente selecionando o(s) arquivo(s)...**")
            selection_result = self.step0_select_file(question)
            
            if not selection_result['sucesso']:
                error_message = f"N√£o consegui determinar qual arquivo usar. Detalhe: {selection_result['erro']}"
                st.error(error_message)
                return error_message

            arquivos_escolhidos = selection_result['arquivos_escolhidos']
            header_file = selection_result.get('header_file')
            items_file = selection_result.get('items_file')
            st.success(f"‚úÖ Arquivo(s) escolhido(s): {arquivos_escolhidos}")


            st.write("**ETAPA 1: Interpretando pergunta e gerando c√≥digo...**")
            generated_code = self.step1_interpret_question(question, arquivos_escolhidos, header_file, items_file)
            st.code(generated_code, language='python')
            
            st.write("**ETAPA 2: Executando c√≥digo...**")
            execution_result = self.step2_execute_code(generated_code, arquivos_escolhidos)
            
            if execution_result['sucesso']:
                st.success("‚úÖ C√≥digo executado com sucesso!")
                st.write(f"**Resultado:** {execution_result['resultado']}")
            else:
                st.error("‚ùå Erro na execu√ß√£o do c√≥digo gerado:")
                st.code(execution_result['erro'])
                if 'traceback' in execution_result:
                    st.code(execution_result['traceback'])
            
            st.write("**ETAPA 3: Gerando resposta final...**")
        
        final_response = self.step3_generate_response(question, execution_result)
        
        return final_response
    
    def get_dataframe_info(self, df_name):
        """Retorna informa√ß√µes sobre um DataFrame"""
        if df_name in self.dataframes:
            df = self.dataframes[df_name]
            info = {
                "shape": df.shape,
                "columns": list(df.columns),
                "dtypes": df.dtypes.to_dict(),
                "sample": df.head(5).to_dict('records'),
                "total_rows": len(df),
                "memory_usage": df.memory_usage(deep=True).sum()
            }
            return info
        return None
    
    def get_quick_stats(self, df_name):
        """Retorna estat√≠sticas r√°pidas sem usar o agente"""
        if df_name in self.dataframes:
            df = self.dataframes[df_name]
            stats = {
                "total_rows": len(df),
                "total_columns": len(df.columns),
                "numeric_columns": len(df.select_dtypes(include=['number']).columns),
                "text_columns": len(df.select_dtypes(include=['object']).columns),
                "null_values": df.isnull().sum().sum(),
                "duplicated_rows": df.duplicated().sum()
            }
            return stats
        return None

    def get_column_analysis(self, df_name):
        """Retorna an√°lise detalhada das colunas para ajudar na identifica√ß√£o"""
        if df_name in self.dataframes:
            df = self.dataframes[df_name]
            analysis = {}
            
            for col in df.columns:
                analysis[col] = {
                    "tipo": str(df[col].dtype),
                    "valores_unicos": df[col].nunique(),
                    "nulos": df[col].isnull().sum(),
                    "exemplo": str(df[col].dropna().iloc[0]) if not df[col].dropna().empty else "N/A"
                }
            
            return analysis
        return None


def main():   
    if 'history' not in st.session_state:
        st.session_state.history = []

    st.title("ü§ñ Agente Inteligente para An√°lise de CSV")
    st.markdown("### üîÑ Sistema em 3 Etapas: Pergunta ‚Üí C√≥digo ‚Üí Execu√ß√£o ‚Üí Resposta")
    
    # Inicializa o agente
    if 'agent' not in st.session_state:
        st.session_state.agent = CSVAnalysisAgent()
    
    agent = st.session_state.agent
    
    # Sidebar para upload e configura√ß√£o
    with st.sidebar:
        st.header("üìÅ Carregar Dados")
        
        # Upload de arquivo
        uploaded_file = st.file_uploader(
            "Fa√ßa upload de arquivo ZIP ou CSV",
            type=['zip', 'csv'],
            help="Aceita arquivos ZIP contendo CSVs ou arquivos CSV individuais"
        )
        
        if uploaded_file:
            # Cria diret√≥rio tempor√°rio
            temp_dir = tempfile.mkdtemp()
            
            try:
                if uploaded_file.name.endswith('.zip'):
                    # Salva arquivo ZIP
                    zip_path = os.path.join(temp_dir, uploaded_file.name)
                    with open(zip_path, 'wb') as f:
                        f.write(uploaded_file.getbuffer())
                    
                    # Descompacta
                    extract_dir = os.path.join(temp_dir, 'extracted')
                    if agent.extract_zip_files(zip_path, extract_dir):
                        # Carrega CSVs
                        agent.dataframes = agent.load_csv_files(extract_dir)
                else:
                    # Arquivo CSV individual
                    csv_path = os.path.join(temp_dir, uploaded_file.name)
                    with open(csv_path, 'wb') as f:
                        f.write(uploaded_file.getbuffer())
                    agent.dataframes = agent.load_csv_files(temp_dir)
                
                st.success(f"Carregados {len(agent.dataframes)} arquivo(s) CSV")
                
            except Exception as e:
                st.error(f"Erro ao processar arquivo: {e}")
    
    # Interface principal
    if agent.dataframes:
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.header("üìã Arquivos Dispon√≠veis")
            
            # Sele√ß√£o de arquivo
            selected_file = st.selectbox(
                "Escolha um arquivo para analisar:",
                list(agent.dataframes.keys())
            )
            
            if selected_file:
                agent.select_dataframe(selected_file)
                
            # C√ìDIGO NOVO (com Abas)

            # ... seu c√≥digo da col1 ...

            # 1. Criamos todas as abas em uma √∫nica linha
            tab_geral, tab_colunas, tab_dados = st.tabs(["Vis√£o Geral", "An√°lise das Colunas", "Amostra dos Dados"])

            # 2. Abrimos um bloco 'with' para cada aba e movemos o conte√∫do para dentro
            with tab_geral:
                # Mova para c√° o c√≥digo que estava no expander "Informa√ß√µes do Arquivo"
                st.subheader("Vis√£o Geral do Arquivo") # Adiciona um t√≠tulo dentro da aba
                info = agent.get_dataframe_info(selected_file)
                stats = agent.get_quick_stats(selected_file)
                
                col_metrica1, col_metrica2 = st.columns(2)
                col_metrica1.metric("Total de Linhas", stats['total_rows'])
                col_metrica2.metric("Total de Colunas", stats['total_columns'])
                # ... continue com as outras informa√ß√µes ...

            with tab_colunas:
                # Mova para c√° o c√≥digo que estava no expander "An√°lise das Colunas"
                st.subheader("An√°lise Detalhada de Cada Coluna")
                col_analysis = agent.get_column_analysis(selected_file)
                if col_analysis:
                    for col, details in col_analysis.items():
                        st.write(f"**{col}** (`{details['tipo']}`)")
                        st.write(f"  - Valores √∫nicos: {details['valores_unicos']} | Nulos: {details['nulos']}")
                        # ...

            with tab_dados:
                # Mova para c√° o c√≥digo que estava no expander "Preview dos Dados"
                st.subheader("Amostra dos Dados Brutos")
                st.dataframe(agent.current_df) # Mostrando o dataframe inteiro na aba
        
        # SUBSTITUA TODO O SEU BLOCO "with col2:" POR ESTE

        # SUBSTITUA TODO O SEU BLOCO "with col2:" POR ESTE

        # SUBSTITUA TODO O SEU BLOCO "with col2:" PELA VERS√ÉO ABAIXO

        with col2:
            st.header("üí¨ Fa√ßa sua Pergunta")
            
            # --- IN√çCIO DA NOVA L√ìGICA DE SINALIZADOR ---

            # Verifica se a bandeira para limpar o texto foi levantada na execu√ß√£o anterior
            if st.session_state.get("clear_text_box_flag", False):
                st.session_state.question_input = ""  # Limpa o estado da caixa de texto
                st.session_state.clear_text_box_flag = False # Abaixa a bandeira

            # --- FIM DA NOVA L√ìGICA DE SINALIZADOR ---
            
            st.markdown("""
            **üîÑ Como funciona:**
            1. **An√°lise de Dados:** Explore os detalhes do arquivo carregado na coluna √† esquerda.
            2. **Pergunta:** Escreva sua pergunta em linguagem natural na caixa de texto.
            3. **Resposta:** O agente ir√° analisar e a resposta aparecer√° no hist√≥rico abaixo.
            """)
            
            # Bot√µes de exemplo voltam a ser simples
            with st.expander("Exemplos de Perguntas Sugeridas"):
                examples = [
                    "Quantas linhas de itens existem?",
                    "Qual produto tem o maior valor unit√°rio?",
                    "Qual o fornecedor com maior montante recebido?",
                    "Mostre o top 5 produtos por quantidade",
                    "Qual o nome do fornecedor do item mais caro?"
                ]
                for example in examples:
                    if st.button(example, key=f"ex_{example}"):
                        st.session_state.question_input = example
                        st.rerun()

            # Input da pergunta controlado pela 'key'
            st.text_area(
                "Sua pergunta:",
                key="question_input",
                height=100,
                placeholder="Digite sua pergunta sobre os dados..."
            )
            
            # Bot√£o Analisar agora simplesmente levanta a bandeira
            if st.button("üîç Analisar", type="primary"):
                question = st.session_state.question_input
                if question:
                    with st.spinner("ü§ñ Agente pensando... (Etapas 0 a 3)"):
                        response = agent.query_data(question)
                        st.session_state.history.append({"pergunta": question, "resposta": response})
                        # Apenas levanta a bandeira para limpar na pr√≥xima execu√ß√£o
                        st.session_state.clear_text_box_flag = True
                        st.rerun()
                else:
                    st.warning("Por favor, digite uma pergunta.")

            # O c√≥digo para exibir o hist√≥rico continua o mesmo
            st.markdown("---")
            st.subheader("Hist√≥rico da An√°lise")

            if st.session_state.history:
                for item in reversed(st.session_state.history):
                    with st.chat_message("user"):
                        st.markdown(item['pergunta'])
                    with st.chat_message("assistant", avatar="üìä"):
                        st.markdown(item['resposta'])
            else:
                st.info("O hist√≥rico de suas an√°lises aparecer√° aqui.")    
    else:
        st.info("üëÜ Fa√ßa upload de um arquivo CSV ou ZIP contendo CSVs para come√ßar")
        
        # Instru√ß√µes
        with st.expander("üìñ Como usar"):
            st.write("""
            **Sistema em 3 Etapas:**
            
            1. **üìù Pergunta:** Voc√™ faz uma pergunta em linguagem natural
            2. **üß† Interpreta√ß√£o:** LLM analisa e gera c√≥digo Python espec√≠fico
            3. **‚ö° Execu√ß√£o:** C√≥digo √© executado no dataset real
            4. **üí¨ Resposta:** LLM transforma o resultado em resposta clara
            
            **Vantagens desta abordagem:**
            - ‚úÖ Maior precis√£o nas respostas
            - ‚úÖ Transpar√™ncia total (voc√™ v√™ o c√≥digo gerado)
            - ‚úÖ Menos erros de parsing
            - ‚úÖ Resultados baseados nos dados reais
            
            **Exemplos de perguntas suportadas:**
            - Quantas linhas tem o dataset?
            - Qual √© o maior valor na coluna X?
            - Mostre estat√≠sticas descritivas
            - Qual categoria tem mais itens?
            - Some os valores da coluna Y
            """)

# Configura√ß√£o para executar
if __name__ == "__main__":
    # Instru√ß√µes de instala√ß√£o
    st.sidebar.markdown("""
    ### üõ†Ô∏è Pr√©-requisitos
    
    **Instalar depend√™ncias:**
    ```bash
    pip install streamlit langchain pandas ollama
    ```
    
    **Instalar Ollama (LLM gratuita):**
    ```bash
    # Linux/Mac
    curl -fsSL https://ollama.ai/install.sh | sh
    
    # Windows: baixar do site ollama.ai
    ```
    
    **Baixar modelo:**
    ```bash
    ollama run llama3.2:3b
    ```
    """)
    
    main()